name: Android_CI armv7-a

on:
  push:
    branches:
      - 'android'

jobs:
  build-android-armv7-a-on-ubuntu:
    name: Android armv7-a
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Install some tools
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential git cmake ca-certificates-java file gettext git libc6 libstdc++6 libc++-dev openjdk-8-jdk-headless openjdk-8-jre-headless unzip wget

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Install NDK
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT}

      - name: Fetch Boost
        run: |
          mkdir -p ${HOME}/opt/android
          wget -nv https://github.com/dec1/Boost-for-Android/releases/download/ndk_21_boost_1.72.0/ndk_21_boost_1.72.0.zip
          unzip -q ndk_21_boost_1.72.0.zip -d ${HOME}/opt/android/boost/
          rm -f ndk_21_boost_1.72.0.zip

      - name: Fetch OpenSSL
        run: |
          git clone https://github.com/PurpleI2P/OpenSSL-for-Android-Prebuilt.git ${HOME}/opt/android/openssl/

      - name: Build armv7-a
        id: build-armv7-a
        run: |
          build_folder="build/release"
          krb_ver=${GITHUB_SHA::7}
          release_name=Karbo-"$krb_ver"-cli-android-armv7-a
          echo "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/arm-linux-androideabi" >> $GITHUB_PATH
          echo "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          mkdir -p "$build_folder"
          cd "$build_folder"
          CC=clang CXX=clang++ CFLAGS='-stdlib=libc++' cmake -D BUILD_TESTS=OFF -D ARCH="armv7-a" \
          -D STATIC=ON -D BUILD_64=OFF -D CMAKE_BUILD_TYPE=Release -D ANDROID=true -D BUILD_TAG="android" \
          -D CMAKE_TOOLCHAIN_FILE="${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake" \
          -D ANDROID_NATIVE_API_LEVEL=21 -DANDROID_ABI="armeabi-v7a" -D ANDROID_TOOLCHAIN=clang \
          -D OPENSSL_ROOT_DIR=${HOME}/opt/android/openssl/openssl-1.1.1k-clang \
          -D OPENSSL_SSL_LIBRARY=${HOME}/opt/android/openssl/openssl-1.1.1k-clang/armeabi-v7a/lib/libssl.a \
          -D OPENSSL_CRYPTO_LIBRARY=${HOME}/opt/android/openssl/openssl-1.1.1k-clang/armeabi-v7a/lib/libcrypto.a \
          -D OPENSSL_INCLUDE_DIR=${HOME}/opt/android/openssl/openssl-1.1.1k-clang/include \
          -D BOOST_IGNORE_SYSTEM_PATHS_DEFAULT=ON -DBoost_NO_SYSTEM_PATHS=ON -D Boost_USE_STATIC_RUNTIME=ON \
          -D BOOST_ROOT=${HOME}/opt/android/boost/ndk_21_boost_1.72.0 \
          -D Boost_INCLUDE_DIR=${HOME}/opt/android/boost/ndk_21_boost_1.72.0/include \
          -D Boost_LIBRARY_DIR=${HOME}/opt/android/boost/ndk_21_boost_1.72.0/libs/armeabi-v7a \
          -D Boost_LIBRARY_DIRS=${HOME}/opt/android/boost/ndk_21_boost_1.72.0/libs/armeabi-v7a \
          -D CMAKE_POSITION_INDEPENDENT_CODE:BOOL=true ../..
          make SimpleWallet
          mkdir -p "$release_name"
          cp src/simplewallet "$release_name/"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=artifact_path::$build_folder/$release_name"

      - name: Upload armv7-a to GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ steps.build-armv7-a.outputs.release_name }}
          path: ${{ steps.build-armv7-a.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
